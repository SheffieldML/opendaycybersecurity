[{"stage":"intro","message":"clearbox<b>Welcome to the Computer Science Cybersecurity Challenge!</b> <br />\n\nYour team are going to attempt to access a series of increasingly challenging systems. In the process you will learn about some simple cybersecurity vulnerabilities. We will occasionally include hints and messages here - so keep an eye on this console! But, this is a race, so don't just wait for the next hint to show you the way!<br /> <br/>\n\nIn this first challenge, can you control the angle of the robot? Emma the admin has been making changes to the angle of the robot using a web interface. Your challenge is to access the web interface and control the robot!<br/>."
,"wait":10},
{"stage":"webpage","message":"To get started, <a href='$target_link$' target='_blank' rel='noopener noreferrer'>here</a> is the webpage that Emma is using to control the angle of the robot.","wait":20},
{"stage":"protocol","message":"The first hint is, look at the address of the webpage, and the protocol that is being used to access it. What do you notice? You might need to use a packet analyser, such as wireshark, to solve this challenge.","wait":30},
{"stage":"wireshark","message":"To access wireshark, open a terminal and type <code>wireshark</code> ","wait":60},
{"stage":"terminal","message":"To open a terminal click the terminal icon in the toolbar, then type in <code>wireshark</code> and press enter.","wait":60},
{"stage":"terminal_stuck","message":"You might need a bit of help (ask a student ambassador!)","wait":6000},
{"stage":"loopback","message":"Great: You've got wireshark running.<br/>The traffic we want to intercept is actually on this local computer. We therefore need to listen to the loopback device. See if you can find the <code>Loopback: lo</code> device in the list.","wait":60},
{"stage":"form","message":"There's a lot of local traffic! What are we looking for?<br/> Let's look back at the <a href='$target_link$' target='_blank' rel='noopener noreferrer'>webform</a> that controls the robot. If you right click on the form's webpage and click <i>view page source</i>. Have a look at what end point the form 'action' is set to.","wait":60},
{"stage":"filter","message":"We need to search through the traffic on the loopback interface using a display filter to search -- we can type one into the text bar at the top of wireshark. Here's <a href='https://wiki.wireshark.org/DisplayFilters#examples' target='_blank' rel='noopener noreferrer'>a page about writing filters</a>! ","wait":30},
{"stage":"filter2","message":"To help devise the filter: The '<code>http.request.uri matches \"something\"</code>' filter looks useful? Try typing that into the display filter - but have a think what we want the uri to match? (think about what the end-point is called that we saw in the form).","wait":60},
{"stage":"filter3","message":"Try using this filter: <b><code>http.request.uri matches \"rotationcontrol\"</code></b>. You should then be able to see the username and password in plaintext in the packet! Try feeding these into the <a href='$target_link$' target='_blank' rel='noopener noreferrer'>webform</a>!","wait":120},
{"stage":"stuck","message":"You seem to be a bit stuck! Ask a student ambassador for help!","wait":6000},
{"stage":"intro_challenge2","message":"<b>Challenge 2: </b> <br />\n\nWell done - you gained access to the robot rotating system. The next step is to control its forwards motion.<br/><br/><a href='$target_link2$' target='_blank' rel='noopener noreferrer'>This webpage</a> is the form that Emma is using to control the forward movement of the robot.","wait":45},
{"stage":"wireshark_again","message":"You probably need wireshark again, and will again benefit from looking at the sourcecode to see what the form sends and to where.","wait":60},
{"stage":"view_source","message":"You can again view the sourcecode by right clicking on the form webpage and clicking 'View Page Source'.","wait":60},
{"stage":"view_source","message":"Pasting the password into the form doesn't seem to work - it's been hashed - which is sort of a weak/poor form of encryption. How can we still use this?","wait":60},
{"stage":"view_source","message":"We can still send this hashed version of the password to the server directly (rather than using the webform). The easiest way is to fill in the form with some made-up username, passwords and distance. You will get to an 'Access denied' page. Have a look at the address bar. (Note: Another weak design choice here is to send this sensitive data via GET instead of POST - although without 'https' proper encryption neither is ok here!). You can see that the hashed password is in the address bar, it might be something like: <br/><br/><code>http://127.0.0.1:5000/movecontrol?username=blah&password=6f1ed002ab5595859014ebf0951522d9&distance=4</code><br/><br/>Can you use wireshark to pick out an HTTP request from Emma to this end-point (and so update the username and password)?","wait":600}
]


